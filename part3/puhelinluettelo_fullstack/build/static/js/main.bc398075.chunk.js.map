{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","axios","get","then","response","console","log","data","newPerson","post","id","put","delete","FilterForm","value","onChange","Person","person","onBtn","name","number","onClick","PersonList","persons","filter","p","toLowerCase","includes","map","key","Notification","message","text","className","error","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setFilter","setMessage","updatePersons","personService","catch","showError","useEffect","showMessage","setTimeout","deletePerson","find","window","confirm","event","target","onSubmit","preventDefault","type","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bc398075.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'http://localhost:3001/api/persons'\n\nconst get = () => {\n    return axios.get(baseUrl)\n                .then(response => {\n                    console.log(response)\n                    return response.data\n                })\n}\n\nconst add = (newPerson) => {\n    return axios.post(baseUrl, newPerson)\n                .then(response => {\n                    console.log(response)\n                    return response.data\n                })\n}\n\nconst update = (id, newPerson) => {\n    return axios.put(`${baseUrl}/${id}`, newPerson)\n                .then(response => {\n                    console.log(response)\n                    return response.data\n                })\n}\n\nconst del = (id) => {\n    return axios.delete(`${baseUrl}/${id}`)\n                .then(response => {\n                    console.log(response)\n                    return response.data\n                })\n}\n\nexport default { get, add, update, del }\n","import React, { useState, useEffect } from 'react'\nimport personService from './services/persons'\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ message, setMessage ] = useState({text: null, error: false})\n\n  const nameChange   = (event) => setNewName(event.target.value)\n  const numberChange = (event) => setNewNumber(event.target.value)\n  const filterChange = (event) => setFilter(event.target.value)\n\n  const updatePersons = () => {\n    personService.get().then(data => setPersons(data))\n    .catch(error => showError(`Fetching data failed: ${error.response.data.error}`))\n    setNewName('')\n    setNewNumber('')\n  }\n\n  useEffect(updatePersons, [])\n\n  const showMessage = (message) => {\n    setMessage({text: message, error: false})\n    setTimeout(() => {\n      setMessage({text: null, error: false})\n    }, 5000)\n  }\n  \n  const showError = (message) => {\n    setMessage({text: message, error: true})\n    setTimeout(() => {\n      setMessage({text: null, error: false})\n    }, 5000)\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    if (persons.map(p => p.name).includes(newName)) {\n      const person = persons.find(p => p.name === newName)\n      if (!person.number || window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n        const newPerson = {...person, number: newNumber}\n        personService.update(person.id, newPerson)\n        .then(updatePersons)\n        .then(() => showMessage(`Updated ${person.name}`))\n        .catch(error => showError(`Updating ${person.name} failed: ${error.response.data.error}`))\n      }\n    } else {\n      const newPerson = {\n        name: newName,\n        number: newNumber\n      }\n      personService.add(newPerson)\n        .then(updatePersons)\n        .then(() => showMessage(`Added ${newPerson.name}`))\n        .catch(error => {\n          showError(`Adding person failed: ${error.response.data.error}`)\n        })\n    }\n  }\n\n  const handleDelBtn = (event) => deletePerson(event.target.value)\n\n  const deletePerson = (id) => {\n    const person = persons.find(p => p.id === id)\n\n    if (person && window.confirm(`Do you want to delete ${person.name}?`)) {\n      personService.del(id).then(() => {\n        setPersons(persons.filter(p => p.id !== id))\n      })\n      .then(() => showMessage(`Deleted ${person.name}`))\n      .catch(error => showError(`Deleting failed: ${error.response.data.error}`))\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n        <FilterForm value={filter} onChange={filterChange} />\n      <h2>Add a new</h2>\n      <form onSubmit={addPerson}>\n        <div>\n          name: <input value={newName} onChange={nameChange}/>\n        </div>\n        <div>\n          number: <input value={newNumber} onChange={numberChange}/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <Notification message={message} />\n      <h2>Numbers</h2>\n        <PersonList persons={persons} filter={filter} onBtn={handleDelBtn}/>\n    </div>\n  )\n\n}\n\nconst FilterForm = ({ value, onChange }) => (\n  <form>\n    <div>\n      filter shown with <input value={value} onChange={onChange}/>\n    </div>\n  </form>\n)\n\nconst Person = ({ person, onBtn }) => (\n  <div>\n    {person.name} {person.number}\n    <button onClick={onBtn} value={person.id}>delete</button>\n  </div>\n)\n\nconst PersonList = ({ persons, filter, onBtn }) => (\n  persons.filter(p => p.name.toLowerCase().includes(filter.toLowerCase())).map(p => <Person key={p.name} person={p} onBtn={onBtn}/>)\n)\n\nconst Notification = ({ message }) => {\n  if (message.text === null) {\n    return null\n  }\n  return <div className={message.error ? \"error\" : \"notification\"}>{message.text}</div>\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}